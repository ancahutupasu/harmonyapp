// Generated by view binder compiler. Do not edit!
package com.example.harmony.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RatingBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.harmony.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAddReviewsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout addReview;

  @NonNull
  public final Button addReviewButton;

  @NonNull
  public final Button cancelReviewButton;

  @NonNull
  public final ConstraintLayout frameLayout;

  @NonNull
  public final EditText inputReviewDescription;

  @NonNull
  public final RatingBar ratingReviewBar;

  @NonNull
  public final TextView textView2;

  private FragmentAddReviewsBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout addReview, @NonNull Button addReviewButton,
      @NonNull Button cancelReviewButton, @NonNull ConstraintLayout frameLayout,
      @NonNull EditText inputReviewDescription, @NonNull RatingBar ratingReviewBar,
      @NonNull TextView textView2) {
    this.rootView = rootView;
    this.addReview = addReview;
    this.addReviewButton = addReviewButton;
    this.cancelReviewButton = cancelReviewButton;
    this.frameLayout = frameLayout;
    this.inputReviewDescription = inputReviewDescription;
    this.ratingReviewBar = ratingReviewBar;
    this.textView2 = textView2;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAddReviewsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAddReviewsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_add_reviews, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAddReviewsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout addReview = (ConstraintLayout) rootView;

      id = R.id.addReviewButton;
      Button addReviewButton = ViewBindings.findChildViewById(rootView, id);
      if (addReviewButton == null) {
        break missingId;
      }

      id = R.id.cancelReviewButton;
      Button cancelReviewButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelReviewButton == null) {
        break missingId;
      }

      id = R.id.frameLayout;
      ConstraintLayout frameLayout = ViewBindings.findChildViewById(rootView, id);
      if (frameLayout == null) {
        break missingId;
      }

      id = R.id.inputReviewDescription;
      EditText inputReviewDescription = ViewBindings.findChildViewById(rootView, id);
      if (inputReviewDescription == null) {
        break missingId;
      }

      id = R.id.ratingReviewBar;
      RatingBar ratingReviewBar = ViewBindings.findChildViewById(rootView, id);
      if (ratingReviewBar == null) {
        break missingId;
      }

      id = R.id.textView2;
      TextView textView2 = ViewBindings.findChildViewById(rootView, id);
      if (textView2 == null) {
        break missingId;
      }

      return new FragmentAddReviewsBinding((ConstraintLayout) rootView, addReview, addReviewButton,
          cancelReviewButton, frameLayout, inputReviewDescription, ratingReviewBar, textView2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
